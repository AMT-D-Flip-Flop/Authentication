name: CICD Pipeline
on:
  workflow_dispatch:
  push:
jobs:
  tests:
    #Run the tests
    name: Unit tests
    runs-on: ubuntu-latest
    services:
      #Start the mysql server
      mysql:
        image: mysql:latest
        env:
          MYSQL_DATABASE: db_flipflop
          MYSQL_HOST: 127.0.0.1
          MYSQL_USER: flipflop
          MYSQL_PASSWORD: FlipFlop1234
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3307:3307
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 8
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run Tests
      - name: Run Tests
        run: mvn -B test

  build:
    #Depends on tests
    needs: tests
    #Only run it on the main branch
    if: github.ref == 'refs/heads/main'
    name: Build and Deploy
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 8
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '8'
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Write DMZ SSH Key
        run: echo "${{ secrets.SSH_DMZ_KEY }}" > DMZ_KEY.pem && chmod 400 DMZ_KEY.pem
      - name: Start DMZ tunnel
        run: ssh -tt -o StrictHostKeyChecking=no -L 8081:${{ secrets.SSH_EC2_IP }}:8080 ${{ secrets.SSH_DMZ_USER }}@${{ secrets.SSH_DMZ_IP }} -i DMZ_KEY.pem &
      - name: "Setup maven settings"
        uses: s4u/maven-settings-action@v2.4.1
        with:
          servers: '[{"id": "TomcatServer", "username": "${{ secrets.TOMCAT_USERNAME }}", "password": "${{ secrets.TOMCAT_PASSWORD }}"}]'
      #Build the application using Maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      #Build the application using Maven
      - name: Upload WAR
        #This uploads artifacts from your workflow allowing you to share data between jobs and store data once a workflow is complete.
        uses: actions/upload-artifact@v2
        with:
          #Set artifact name
          name: release
          #From this path
          path: target/Authentication.war
      #Deploy the app to Tomcat
      - name: Deploy with Maven
        run: mvn tomcat7:redeploy-only --file pom.xml
